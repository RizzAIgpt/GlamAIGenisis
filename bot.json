{
  "version": "1.17",
  "settings": {
    "defaultLanguage": "en",
    "languages": [
      "en"
    ],
    "description": "",
    "id": "de82467b-6eb5-49b2-9343-87f5ced0109a",
    "inactivityTimeout": 30,
    "botVariables": [],
    "userVariables": [],
    "nodeRepetitionLimit": 3,
    "configVariables": {},
    "cognitiveConfigs": {
      "openAi": {}
    },
    "useLlmz": true,
    "defaultBestModel": "openai__gpt-4o-2024-11-20",
    "defaultFastModel": "openai__gpt-4o-mini-2024-07-18",
    "useClient": true,
    "llmzVersion": "01-Oct-2024",
    "autonomousModel": "best-model",
    "fallbackModel": "google-ai__models/gemini-2.0-flash"
  },
  "flows": [
    {
      "id": "wf-error",
      "name": "Error",
      "startNode": "nd-98dc0bcc87",
      "variables": [],
      "links": [
        {
          "id": "edg-1cb5862648",
          "source": "nd-98dc0bcc87",
          "sourcePort": "trs-02c7129430",
          "target": "nd-58fca56e01"
        },
        {
          "id": "edg-1c28c96d6a",
          "source": "nd-58fca56e01",
          "sourcePort": "nd-58fca56e01",
          "target": "nd-e05f59dd66"
        }
      ],
      "nodes": [
        {
          "comment": "<p><strong><span style=\"font-size: 18px\">‚õîÔ∏è When something goes wrong</span></strong></p><p><br>This workflow is executed when there's an <strong>unexpected error</strong> in one of the other workflows.</p><p></p><p>You can use this to inform the user of the situation before ending the conversation.</p>",
          "type": "comment",
          "id": "nd-8ff3d7d295",
          "name": "Comment1",
          "deletable": true,
          "instructions": [],
          "height": 148,
          "width": 401,
          "x": 90,
          "y": -45
        },
        {
          "instructions": [
            {
              "id": "ins-2762f70004",
              "type": "content",
              "content": {
                "type": "text",
                "text": {
                  "staticValue": "Sorry, an error occurred. Please try again later",
                  "dynamicValue": "",
                  "valueType": "static"
                },
                "typing": {
                  "valueType": "static",
                  "staticValue": true
                }
              },
              "nodeId": "nd-58fca56e01",
              "transitions": []
            }
          ],
          "defaultTransition": {
            "targetNodeId": "nd-e05f59dd66"
          },
          "type": "standard",
          "id": "nd-58fca56e01",
          "name": "Handler",
          "deletable": true,
          "x": 450,
          "y": 120
        },
        {
          "id": "nd-98dc0bcc87",
          "name": "On_Error",
          "type": "entry",
          "deletable": false,
          "variables": [],
          "instructions": [
            {
              "id": "trs-02c7129430",
              "type": "transition",
              "condition": {
                "type": "expression",
                "payload": "true"
              },
              "destination": {
                "node": "nd-58fca56e01"
              },
              "transitions": [],
              "nodeId": "nd-98dc0bcc87"
            }
          ],
          "x": 90,
          "y": 120
        },
        {
          "id": "nd-e05f59dd66",
          "name": "End",
          "type": "end",
          "variables": [],
          "deletable": false,
          "instructions": [
            {
              "id": "trs-945140a646",
              "type": "transition",
              "condition": {
                "type": "expression",
                "payload": "true"
              },
              "destination": {
                "node": "END"
              },
              "transitions": [],
              "nodeId": "nd-e05f59dd66"
            }
          ],
          "x": 810,
          "y": 120
        }
      ]
    },
    {
      "id": "wf-timeout",
      "name": "Timeout",
      "startNode": "nd-9f7f3268ac",
      "variables": [],
      "links": [
        {
          "id": "edg-b0d2adcd13",
          "source": "nd-e6c012a652",
          "sourcePort": "nd-e6c012a652",
          "target": "nd-199fdcf439"
        },
        {
          "id": "edg-6d17a0591b",
          "source": "nd-9f7f3268ac",
          "sourcePort": "trs-0c7a9a0003",
          "target": "nd-e6c012a652"
        }
      ],
      "nodes": [
        {
          "instructions": [],
          "defaultTransition": {
            "targetNodeId": "nd-199fdcf439"
          },
          "type": "standard",
          "id": "nd-e6c012a652",
          "name": "Handler",
          "deletable": true,
          "x": 435,
          "y": 105
        },
        {
          "comment": "<p><strong><span style=\"font-size: 18px\">‚åõÔ∏è When conversation times out</span></strong></p><p><br>This workflow is executed when the conversation <strong>times out</strong> before it had time to flow to an <strong>End Node</strong>.</p><p></p><p>The <strong>Timeout Delay</strong> is configurable in the <strong>Chatbot Settings.</strong></p><p></p><p>You can use this to inform the user of the situation before ending the conversation.</p>",
          "type": "comment",
          "id": "nd-441efa6c42",
          "name": "Comment1",
          "deletable": true,
          "instructions": [],
          "height": 173,
          "width": 401,
          "x": 105,
          "y": -90
        },
        {
          "id": "nd-9f7f3268ac",
          "name": "On_Timeout",
          "type": "entry",
          "deletable": false,
          "variables": [],
          "instructions": [
            {
              "id": "trs-0c7a9a0003",
              "type": "transition",
              "condition": {
                "type": "expression",
                "payload": "true"
              },
              "destination": {
                "node": "nd-e6c012a652"
              },
              "transitions": []
            }
          ],
          "x": 100,
          "y": 100
        },
        {
          "id": "nd-199fdcf439",
          "name": "End",
          "type": "end",
          "variables": [],
          "deletable": false,
          "instructions": [
            {
              "id": "trs-bf76943d55",
              "type": "transition",
              "condition": {
                "type": "expression",
                "payload": "true"
              },
              "destination": {
                "node": "END"
              },
              "transitions": []
            }
          ],
          "x": 795,
          "y": 105
        }
      ]
    },
    {
      "id": "wf-conversation-end",
      "name": "Conversation End",
      "startNode": "nd-c0d3bd2c92",
      "variables": [],
      "links": [
        {
          "id": "edg-3cb8028ff6",
          "source": "nd-c0d3bd2c92",
          "sourcePort": "trs-92c6f93b0c",
          "target": "nd-2db7499cc6"
        },
        {
          "id": "edg-8a88f687a0",
          "source": "nd-2db7499cc6",
          "sourcePort": "nd-2db7499cc6",
          "target": "nd-d0c2a6be81"
        }
      ],
      "nodes": [
        {
          "instructions": [],
          "defaultTransition": {
            "targetNodeId": "nd-d0c2a6be81"
          },
          "type": "standard",
          "id": "nd-2db7499cc6",
          "name": "Handler",
          "deletable": true,
          "x": 420,
          "y": 105
        },
        {
          "comment": "<p><strong><span style=\"font-size: 18px\">üëã Before Conversation Ends</span></strong></p><p><br>This workflow is executed when right before the conversation <strong>Ends Explicitly.</strong></p><p></p><p>An <strong>Explicit Ending</strong> happens when a workflow transitions on an <strong>End Node</strong>.</p>",
          "type": "comment",
          "id": "nd-6d5d3f41dd",
          "name": "Comment1",
          "deletable": true,
          "instructions": [],
          "height": 148,
          "width": 461,
          "x": 105,
          "y": -45
        },
        {
          "id": "nd-c0d3bd2c92",
          "name": "On_Explicit_Ending",
          "type": "entry",
          "deletable": false,
          "variables": [],
          "instructions": [
            {
              "id": "trs-92c6f93b0c",
              "type": "transition",
              "condition": {
                "type": "expression",
                "payload": "true"
              },
              "destination": {
                "node": "nd-2db7499cc6"
              },
              "transitions": []
            }
          ],
          "x": 100,
          "y": 100
        },
        {
          "id": "nd-d0c2a6be81",
          "name": "End",
          "type": "end",
          "variables": [],
          "deletable": false,
          "instructions": [
            {
              "id": "trs-7004dbb2b6",
              "type": "transition",
              "condition": {
                "type": "expression",
                "payload": "true"
              },
              "destination": {
                "node": "END"
              },
              "transitions": []
            }
          ],
          "x": 780,
          "y": 105
        }
      ]
    },
    {
      "topicId": "tpc-global",
      "id": "wf-main",
      "name": "Main",
      "startNode": "nd-2bb9db230d",
      "variables": [],
      "links": [],
      "nodes": [
        {
          "id": "nd-2bb9db230d",
          "name": "Start",
          "type": "start",
          "deletable": false,
          "instructions": [
            {
              "id": "trs-8b0779edc5",
              "type": "transition",
              "condition": {
                "type": "expression",
                "payload": "true"
              },
              "destination": {
                "node": "nd-54aa0c19de"
              },
              "transitions": [],
              "nodeId": "nd-2bb9db230d"
            }
          ],
          "x": -105,
          "y": -180,
          "kbPriority": {
            "enabled": false,
            "searchScope": "specific",
            "kbs": []
          }
        },
        {
          "id": "nd-80ac4ff158",
          "name": "End",
          "type": "end",
          "deletable": false,
          "instructions": [
            {
              "id": "trs-0260f5e672",
              "type": "transition",
              "condition": {
                "type": "expression",
                "payload": "true"
              },
              "destination": {
                "node": "END"
              },
              "transitions": [],
              "nodeId": "nd-80ac4ff158"
            }
          ],
          "x": 420,
          "y": -60
        },
        {
          "type": "autonomous",
          "deletable": true,
          "x": 90,
          "y": -240,
          "instructions": [
            {
              "id": "ins-1465ce0650",
              "agentId": "KnowledgeAgent",
              "toolId": "knowledge-query",
              "toolType": "search",
              "type": "autonomous",
              "label": "Search Knowledge Bases",
              "category": "Knowledge Bases",
              "nodeId": "nd-54aa0c19de",
              "transitions": [],
              "description": "Searches for information in the official knowledge bases.",
              "kbs": {
                "valueType": "static",
                "staticValue": []
              },
              "advanced": {
                "mode": "breadcrumb",
                "contextDepth": 2,
                "maxTokens": 20
              }
            },
            {
              "id": "act-952d59bb49",
              "type": "autonomous",
              "toolType": "integration",
              "origin": "integration",
              "label": "Web Search",
              "category": "Browser",
              "integrationId": "browser",
              "actionName": "webSearch",
              "nodeId": "nd-54aa0c19de"
            },
            {
              "id": "act-737e2e89c7",
              "type": "autonomous",
              "toolType": "integration",
              "origin": "integration",
              "label": "Capture Screenshot",
              "category": "Browser",
              "integrationId": "browser",
              "actionName": "captureScreenshot",
              "nodeId": "nd-54aa0c19de"
            },
            {
              "id": "act-94d71ebde1",
              "type": "autonomous",
              "toolType": "integration",
              "origin": "integration",
              "label": "Transcribe Audio",
              "category": "Groq",
              "integrationId": "groq",
              "actionName": "transcribeAudio",
              "nodeId": "nd-54aa0c19de"
            },
            {
              "id": "act-5625370c0c",
              "type": "autonomous",
              "toolType": "integration",
              "origin": "integration",
              "label": "Create Or Update Feedback Entry For Iteration",
              "category": "Improvement",
              "integrationId": "agi/improvement",
              "actionName": "saveFeedback",
              "nodeId": "nd-54aa0c19de"
            },
            {
              "id": "act-81dbc97307",
              "type": "autonomous",
              "toolType": "integration",
              "origin": "integration",
              "label": "Add Or Update Conversation",
              "category": "Conversation Analyzer",
              "integrationId": "agi/connor",
              "actionName": "addOrUpdateConversation",
              "nodeId": "nd-54aa0c19de"
            },
            {
              "id": "act-69627b1e02",
              "type": "autonomous",
              "toolType": "integration",
              "origin": "integration",
              "label": "Post Install",
              "category": "Conversation Analyzer",
              "integrationId": "agi/connor",
              "actionName": "postInstall",
              "nodeId": "nd-54aa0c19de"
            },
            {
              "id": "act-cb8bbeaa6a",
              "type": "autonomous",
              "toolType": "integration",
              "origin": "integration",
              "label": "Generate Content",
              "category": "Anthropic",
              "integrationId": "anthropic",
              "actionName": "generateContent",
              "nodeId": "nd-54aa0c19de"
            },
            {
              "id": "act-44c93ee824",
              "type": "autonomous",
              "toolType": "integration",
              "origin": "integration",
              "label": "Generate Content",
              "category": "OpenAI",
              "integrationId": "openai",
              "actionName": "generateContent",
              "nodeId": "nd-54aa0c19de"
            },
            {
              "id": "act-b5d3377f70",
              "type": "autonomous",
              "toolType": "integration",
              "origin": "integration",
              "label": "List Image Models",
              "category": "OpenAI",
              "integrationId": "openai",
              "actionName": "listImageModels",
              "nodeId": "nd-54aa0c19de"
            },
            {
              "id": "act-0eca1010a0",
              "type": "autonomous",
              "toolType": "integration",
              "origin": "integration",
              "label": "Generate Image",
              "category": "OpenAI",
              "integrationId": "openai",
              "actionName": "generateImage",
              "nodeId": "nd-54aa0c19de"
            }
          ],
          "id": "nd-54aa0c19de",
          "name": "AutonomousNode",
          "writableVariables": [],
          "allowConversation": true,
          "guidelines": {
            "valueType": "dynamic",
            "dynamicValue": "You are a beauty expert AI trained to analyze celebrity makeup looks and help users recreate them step-by-step.\n\nA user will upload a photo of a celebrity wearing makeup. Your job is to:\n\nAnalyze the look in the image ‚Äî break it down into face, eyes, brows, lips, blush, contour, and highlight.\n\nList the products needed to recreate the look ‚Äî include both luxury options and low-budget dupes, based on the user's budget preference.\n\nAdjust all shade recommendations based on the user's uploaded selfie or chosen skin tone (e.g., fair-neutral, medium-olive, deep-warm).\n\nProvide a step-by-step tutorial, with clear application order and specific brush/tool usage.\n\nFormat everything in a clean, organized way, like:\n\nüì∏ Look Summary\n\nüõçÔ∏è Product List (Luxury + Drugstore)\n\nü™û Step-by-Step Instructions\n\nüé® Color Matching Notes (if applicable)\n\nAsk the user to choose:\n\nüßç Skin tone: fair-neutral / medium-olive / deep-warm\n\nüí∞ Budget: no budget (premium) or low budget (drugstore)\n\nThen generate the full result like a professional makeup artist would."
          }
        },
        {
          "type": "comment",
          "deletable": true,
          "x": 75,
          "y": -435,
          "instructions": [],
          "comment": "<p>This is the default node. It can search the web.</p><p></p><p>Change instructions and add new sub-workflows to start changing its behaviour.</p><p></p><p>Try asking \"What's Botpress?\"</p>",
          "id": "nd-9c5f9a0939",
          "name": "Comment1",
          "height": 163,
          "width": 296
        },
        {
          "type": "video",
          "deletable": true,
          "instructions": [],
          "x": -465,
          "y": -555,
          "youtubeUrl": "https://www.youtube.com/watch?v=Hyq_Bwn2W5M",
          "id": "nd-0a8441430e",
          "name": "Video1"
        }
      ],
      "parentFolder": "root"
    },
    {
      "name": "Custom Vision",
      "links": [
        {
          "id": "lnk-c11be08c2f",
          "source": "nd-42d2253d0d",
          "target": "nd-240bd921dc",
          "sourcePort": "trs-34590fdf3c"
        }
      ],
      "nodes": [
        {
          "x": 100,
          "y": 100,
          "id": "nd-42d2253d0d",
          "name": "Entry",
          "type": "entry",
          "deletable": false,
          "variables": [
            "var-921c78eea1",
            "var-29dc4cec5e",
            "var-8f445dae58"
          ],
          "instructions": [
            {
              "id": "trs-34590fdf3c",
              "type": "transition",
              "nodeId": "nd-42d2253d0d",
              "condition": {
                "type": "expression",
                "payload": "true"
              },
              "destination": {
                "node": "nd-240bd921dc"
              },
              "transitions": []
            }
          ]
        },
        {
          "x": 800,
          "y": 100,
          "id": "nd-95abd57700",
          "name": "Exit",
          "type": "exit",
          "deletable": false,
          "variables": [
            "var-24ed74a5cd"
          ],
          "instructions": [
            {
              "id": "trs-991c1a0649",
              "type": "transition",
              "nodeId": "nd-95abd57700",
              "condition": {
                "type": "expression",
                "payload": "true"
              },
              "destination": {
                "node": "#"
              },
              "transitions": []
            }
          ]
        },
        {
          "x": 450,
          "y": 100,
          "id": "nd-240bd921dc",
          "name": "Standard",
          "type": "standard",
          "deletable": true,
          "instructions": [
            {
              "id": "ins-0465bf217b",
              "code": "const { choices } = await actions.openai.generateContent({\n  model: {\n    id: 'gpt-4o-mini-2024-07-18'\n  },\n  temperature: _.clamp(workflow.temperature, 0, 2),\n  topP: 1,\n  systemPrompt: workflow.prompt,\n  messages: [\n    {\n      role: 'user',\n      type: 'multipart',\n      content: [\n        {\n          type: 'image',\n          url: workflow.image_url\n        }\n      ]\n    }\n  ]\n})\n\nif (!choices.length) {\n  throw new Error('Did not get a response back from OpenAI')\n}\n\nworkflow.output = choices[0].content\n",
              "type": "action",
              "label": "Generate content using OpenAI model and display the output.",
              "nodeId": "nd-240bd921dc",
              "origin": "builtin",
              "category": "Execute",
              "isCustomLabel": false,
              "transpiledCode": "var __defProp = Object.defineProperty;\nvar __name = (target, value) => __defProp(target, \"name\", { value, configurable: true });\nasync function __ROOT__() {\n  const { choices } = await actions.openai.generateContent({\n    model: {\n      id: \"gpt-4o-mini-2024-07-18\"\n    },\n    temperature: _.clamp(workflow.temperature, 0, 2),\n    topP: 1,\n    systemPrompt: workflow.prompt,\n    messages: [\n      {\n        role: \"user\",\n        type: \"multipart\",\n        content: [\n          {\n            type: \"image\",\n            url: workflow.image_url\n          }\n        ]\n      }\n    ]\n  });\n  if (!choices.length) {\n    throw new Error(\"Did not get a response back from OpenAI\");\n  }\n  workflow.output = choices[0].content;\n}\n__name(__ROOT__, \"__ROOT__\");\n; return await __ROOT__();",
              "transitions": []
            }
          ],
          "defaultTransition": {
            "targetNodeId": "nd-95abd57700"
          }
        }
      ],
      "startNode": "nd-42d2253d0d",
      "variables": [
        {
          "id": "var-24ed74a5cd",
          "name": "output",
          "type": "string",
          "scope": "workflow",
          "description": "The output of the vision request",
          "defaultValue": ""
        },
        {
          "id": "var-921c78eea1",
          "name": "temperature",
          "type": "number",
          "scope": "workflow",
          "description": "",
          "defaultValue": 0
        },
        {
          "id": "var-29dc4cec5e",
          "name": "prompt",
          "type": "string",
          "scope": "workflow",
          "description": "",
          "defaultValue": ""
        },
        {
          "id": "var-8f445dae58",
          "name": "image_url",
          "type": "string",
          "scope": "workflow",
          "description": "",
          "defaultValue": ""
        }
      ],
      "id": "wf-01b8a101f4",
      "description": "Extracts the content of an image using OpenAI GPT-4o mini.",
      "hubData": {
        "hubId": "hsk-10810b61a5",
        "workspaceId": "wkspace_01J3HF59F8D12BZ4HQSYXGTNW6",
        "hash": "xso2bj",
        "icon": "https://s3.us-east-1.amazonaws.com/cloud-studio-botsbca2d619-1916w6llinepa/public/media/e468f8da-e117-4233-b84f-30759f13e82c.png",
        "hubType": "workflow:execute"
      }
    }
  ],
  "intents": [
    {
      "id": "int-cancel",
      "name": "cancel",
      "utterances_with_slots": [
        "cancel",
        "abort",
        "abandon",
        "i want to cancel",
        "forget about this",
        "leave",
        "stop",
        "quit",
        "you know what, nevermind",
        "forget it"
      ]
    },
    {
      "id": "int-no",
      "name": "no",
      "utterances_with_slots": [
        "no",
        "i don't want to",
        "absolutely not",
        "nah",
        "nope",
        "not really",
        "not sure",
        "no thanks"
      ]
    },
    {
      "id": "int-yes",
      "name": "yes",
      "utterances_with_slots": [
        "yes",
        "yeah",
        "absolutely",
        "i'd like to",
        "sure ",
        "hmm probably",
        "yup",
        "ok"
      ]
    }
  ],
  "list_entities": [],
  "pattern_entities": [],
  "actions": [],
  "hooks": [
    {
      "id": "hk-99mudt",
      "name": "track_iterations",
      "hookType": "after_llmz_execution",
      "content": "await actions[\"agi/improvement\"].trackIterations({\n  iterations: execution.iterations.map((iteration) => ({\n    uri: `workflow://${execution.location?.workflowId}/${execution.location?.nodeId}`,\n    conversationId: event.conversationId!,\n    executionId: execution.context.id,\n    iterationId: iteration.id,\n    eventId: event.messageId ?? event.id,\n    userId: event.userId!,\n    iteration: {\n      code: iteration.code ?? \"\",\n      ended_ts: iteration.ended_ts,\n      started_ts: iteration.started_ts,\n      messages: iteration.messages,\n      model: iteration.llm.model,\n      mutations: iteration.mutations,\n      status: iteration.status,\n    },\n  })),\n});\n",
      "title": "Track LLMz Iterations",
      "description": "This hook tracks iterations after LLMz execution",
      "origin": {
        "type": "integration",
        "integration": {
          "id": "agi/improvement",
          "name": "agi/improvement",
          "version": "1.0.0",
          "title": "Improvement"
        }
      }
    },
    {
      "id": "hk-1q8lg5q",
      "name": "inject_learnings",
      "hookType": "before_llmz_execution",
      "content": "const { items } = await actions[\"agi/improvement\"].findFeedback({\n  uri: `workflow://${context.location?.workflowId}/${context.location?.nodeId}`,\n  search: context.transcript.map((x) => `${x.role}: ${x.content}`).join(\"\\n\"),\n});\n\nif (items.length) {\n  context.instructions += `\n\n    ## Learnings from Previous Experiences\n\n    ${items\n      .map(\n        (x, i) => `### Learning ${i + 1}\n    ${x.learning}\n    `\n      )\n      .join(\"\\n\")}\n    `;\n}\n",
      "title": "Provide Learnings to LLMz",
      "description": "This hook injects learnings into LLMz before execution",
      "origin": {
        "type": "integration",
        "integration": {
          "id": "agi/improvement",
          "name": "agi/improvement",
          "version": "1.0.0",
          "title": "Improvement"
        }
      }
    },
    {
      "id": "hk-1wnbr9q",
      "name": "knowledge-base-table-of-content",
      "hookType": "before_llmz_execution",
      "content": "\n// >>>>>>>>>>>>>>>>>>>>>>\n// This hook is generated and managed by the \"agi/kbo\" integration.\n// This hook provides your autonomous nodes with a Table of Contents of the included knowledge of\n// the knowledge bases used in your autonomous nodes (those included on the `search` tool).\n// Do not edit this file manually.\n\nconst searchTools = context.tools.filter((x) => x.name === 'search')\n\nawait Promise.allSettled(searchTools.map(appendSearchToolTableOfContent))\n\nasync function appendSearchToolTableOfContent(search: LLMZ.Tool) {\n  type SearchMetadata = { kbs: string[]; searchScope: 'all' | 'specific' }\n  const meta: SearchMetadata = search.metadata?.kbs ?? {\n    kbs: [],\n    searchScope: 'all'\n  }\n\n  const kbs = meta.searchScope === 'specific' ? meta.kbs : Artifact.knowledge_base.map((x) => x.id)\n\n  const passages = await Promise.allSettled(\n    kbs.map((kbId) =>\n      client.searchFiles({\n        query: event.preview,\n        consolidate: true,\n        contextDepth: 2,\n        limit: 2,\n        tags: {\n          purpose: 'master-summary',\n          kbId\n        }\n      })\n    )\n  ).then((x) => x.flatMap((y) => (y.status === 'fulfilled' ? y.value.passages.map((p) => p.content) : [])))\n\n  if (passages.length) {\n    context.instructions += `## Table of Contents (for tool \\`${search.name}\\`)\n\nThe below is a summary of the knowledge included in the Knowledge Bases (available to you when calling \\`${search.name}\\` tool).\n\n${passages.join('\\n\\n')}\n\n`\n  }\n}\n\n// End of the hook\n// <<<<<<<<<<<<<<<<<<<<\n",
      "title": "Knowledge Base Table of Content",
      "description": "Provides a table of content for the enabled Knowledge Bases on the active autonomous nodes.",
      "origin": {
        "type": "integration",
        "integration": {
          "id": "agi/kbo",
          "name": "agi/kbo",
          "version": "2.0.3",
          "title": "Knowledge Base Optimizer"
        }
      }
    },
    {
      "id": "hk-qn6w76",
      "name": "knowledge-base-analytics",
      "hookType": "before_outgoing_middleware",
      "content": "\n// >>>>>>>>>>>>>>>>>>>>>>\n// This hook is generated and managed by the \"agi/kbo\" integration.\n// This hook provides your autonomous nodes with a Table of Contents of the included knowledge of\n// the knowledge bases used in your autonomous nodes (those included on the `search` tool).\n// Do not edit this file manually.\n  try {\n    const citations = (outgoingEvent.citations ?? [])\n      .map((c) => c.citation.source)\n      .map((source) => ({ kbId: source?.kbId, fileId: source?.docId }))\n\n    void actions['agi/kbo'].trackKbQuery({ citations })\n  } catch {}\n\n// End of the hook\n// <<<<<<<<<<<<<<<<<<<<\n",
      "title": "Knowledge Base Analytics",
      "description": "Tracks the usage of the Knowledge Bases",
      "origin": {
        "type": "integration",
        "integration": {
          "id": "agi/kbo",
          "name": "agi/kbo",
          "version": "2.0.3",
          "title": "Knowledge Base Optimizer"
        }
      }
    },
    {
      "id": "hk-ml1yq",
      "name": "conversation-analyzer-track-conversation",
      "hookType": "after_conversation_end",
      "content": "\n// >>>>>>>>>>>>>>>>>>>>>>\n// This hook is generated and managed by the \"agi/connor\" integration.\n// This hook tracks your conversations to provide some useful analytics on them. See the Int_Connor_Conversations_Table\n// Do not edit this file manually.\n\n   const { success, error } = await actions['agi/connor'].addOrUpdateConversation({\n    conversationId: event.conversationId,\n    transcript: event.state.session.history.length\n      ? event.state.session.history.map((h) => ({ sender: h.sender, preview: h.preview }))\n      : [{ sender: 'user', preview: event.preview }]\n  })\n\n// End of the hook\n// <<<<<<<<<<<<<<<<<<<<\n",
      "title": "Track Conversation",
      "description": "Tracks conversations in a Botpress table for analysis",
      "origin": {
        "type": "integration",
        "integration": {
          "id": "agi/connor",
          "name": "agi/connor",
          "version": "0.1.0",
          "title": "Conversation Analyzer"
        }
      },
      "transpiledCode": "var __defProp = Object.defineProperty;\nvar __name = (target, value) => __defProp(target, \"name\", { value, configurable: true });\nasync function __ROOT__() {\n  const { success, error } = await actions[\"agi/connor\"].addOrUpdateConversation({\n    conversationId: event.conversationId,\n    transcript: event.state.session.history.length ? event.state.session.history.map((h) => ({ sender: h.sender, preview: h.preview })) : [{ sender: \"user\", preview: event.preview }]\n  });\n}\n__name(__ROOT__, \"__ROOT__\");\n; return await __ROOT__();"
    }
  ],
  "qnas": [],
  "knowledge_base": [
    {
      "dataSources": [
        {
          "created_on": 1722900679385,
          "data": {},
          "disabled": false,
          "id": "ds-529bb979ed",
          "type": "file-api"
        },
        {
          "created_on": 1744140720833,
          "data": {
            "crawlEventId": "evt_01JRBE6R2KTPHKVF4Y1AN6XR28",
            "indexingJobs": [],
            "pages": [],
            "websiteUrl": "https://www.pantone.com/skintone?srsltid=AfmBOoqtmLaZJtDtb-nOvy_E5ThkGuK--0bvTt-BdpmE9aBtaSHe4EZa"
          },
          "disabled": false,
          "id": "ds-ccc5a83e9e",
          "title": "www.pantone.com",
          "type": "web-page"
        }
      ],
      "description": "This is about New KB1",
      "id": "kb-2f0a7ea639",
      "name": "Default Knowledge Base",
      "parentFolder": "root"
    }
  ],
  "folders": [],
  "agents": {
    "SummaryAgent": {
      "enabled": true,
      "config": {
        "summaryMaxTokens": 100
      }
    },
    "TranslatorAgent": {
      "config": {
        "detectLanguage": true
      }
    },
    "KnowledgeAgent": {
      "enabled": true,
      "config": {
        "answerManually": true,
        "context": "Summary of the conversation:\n\"\"\"\n{{conversation.SummaryAgent.summary}}\n\"\"\"\n\nTranscript:\n\"\"\"\n{{conversation.SummaryAgent.transcript}}\n\"\"\"",
        "bestModel": "gpt-4-turbo",
        "strategy": "hybrid",
        "chunks": 50
      }
    },
    "PersonalityAgent": {
      "config": {
        "personality": ""
      }
    },
    "VisionAgent": {
      "enabled": true,
      "config": {
        "extractionEnabled": true
      }
    }
  },
  "tables": {
    "table_01JRBE18Y6WF680G4S69VZ0BBC": {
      "id": "table_01JRBE18Y6WF680G4S69VZ0BBC",
      "name": "RouterAgentTable",
      "factor": 1,
      "frozen": false,
      "tags": {
        "role": "agents/router/intents",
        "agent": "RouterAgent",
        "system": "true"
      },
      "createdAt": "2025-04-08T19:29:02.921Z",
      "updatedAt": "2025-04-08T19:29:02.921Z",
      "createdBy": "user:a42a63c5-5e7b-4ab5-9d52-606379f4e7d5",
      "updatedBy": null,
      "isComputeEnabled": false,
      "schema": {
        "type": "object",
        "x-zui": {},
        "required": [
          "phrase",
          "intentId",
          "phraseId"
        ],
        "properties": {
          "phrase": {
            "type": "string",
            "x-zui": {
              "index": 0,
              "searchable": true
            }
          },
          "intentId": {
            "type": "string",
            "x-zui": {
              "index": 1,
              "searchable": true
            }
          },
          "phraseId": {
            "type": "string",
            "x-zui": {
              "index": 2,
              "searchable": true
            }
          }
        },
        "additionalProperties": true
      },
      "parentFolder": "root",
      "selectors": []
    },
    "table_01JRBE190XJTGDE7S50MDRX5B3": {
      "id": "table_01JRBE190XJTGDE7S50MDRX5B3",
      "name": "Int_Connor_Conversations_Table",
      "factor": 30,
      "frozen": true,
      "tags": {
        "origin": "integration",
        "purpose": "Conversations",
        "version": "Dec-2024",
        "integration": "Int_connor",
        "x-studio-icon": "lucide://MessagesSquare",
        "x-studio-color": "grass",
        "x-studio-title": "Conversations",
        "x-studio-readonly": "true",
        "x-studio-description": "Table for analyzing conversations"
      },
      "createdAt": "2025-04-08T19:29:03.007Z",
      "updatedAt": "2025-04-08T19:29:03.007Z",
      "createdBy": "user:a42a63c5-5e7b-4ab5-9d52-606379f4e7d5",
      "updatedBy": null,
      "isComputeEnabled": true,
      "schema": {
        "type": "object",
        "x-zui": {},
        "required": [
          "topics",
          "summary",
          "resolved",
          "transcript",
          "escalations",
          "conversationId"
        ],
        "properties": {
          "topics": {
            "type": "array",
            "items": {
              "type": "string",
              "x-zui": {}
            },
            "x-zui": {
              "index": 0,
              "title": "Topics",
              "computed": {
                "action": "ai",
                "prompt": "Identify the topics mentioned by the user in the provided transcript. Focus only on user-initiated topics relevant to their needs (e.g., billing issues, technical troubleshooting, product recommendations, account setup, feature requests, complaints, or cancellation inquiries). \nTranscript:\n\n{{transcript}}",
                "dependencies": [
                  "transcript"
                ]
              },
              "searchable": true
            },
            "nullable": true,
            "description": "Optional. An array of topics or themes discussed during the conversation."
          },
          "summary": {
            "type": "string",
            "x-zui": {
              "index": 1,
              "title": "Summary",
              "computed": {
                "action": "ai",
                "prompt": "Summarize the provided transcript.\nHere's the transcript:\n\n{{transcript}}",
                "dependencies": [
                  "transcript"
                ]
              },
              "searchable": true
            },
            "nullable": true,
            "description": "A brief summary of the conversation's content."
          },
          "resolved": {
            "type": "boolean",
            "x-zui": {
              "index": 2,
              "title": "Resolved",
              "computed": {
                "action": "ai",
                "prompt": "Based on the transcript decide whether the users queries were resolved or not by the end of the chat. If not resolved respond with `false`.\nHere's the transcript:\n\n{{transcript}}",
                "dependencies": [
                  "transcript"
                ]
              },
              "searchable": true
            },
            "nullable": true,
            "description": "A boolean indicating whether the customer's issue was resolved by the end of the chat."
          },
          "sentiment": {
            "enum": [
              "very positive",
              "positive",
              "neutral",
              "negative",
              "very negative"
            ],
            "type": "string",
            "x-zui": {
              "index": 3,
              "title": "Sentiment",
              "computed": {
                "action": "ai",
                "prompt": "Based on the transcript decide the overall sentiment inferred from the conversation (from the following - very positive, positive, neutral, negative, very negative).\nHere's the transcript:\n\n{{transcript}}",
                "dependencies": [
                  "transcript"
                ]
              },
              "searchable": true
            },
            "nullable": true,
            "description": "Optional. The overall sentiment inferred from the conversation (e.g., positive, neutral, negative)."
          },
          "transcript": {
            "type": "array",
            "items": {
              "type": "object",
              "x-zui": {},
              "required": [
                "sender",
                "preview"
              ],
              "properties": {
                "sender": {
                  "enum": [
                    "bot",
                    "user"
                  ],
                  "type": "string",
                  "x-zui": {}
                },
                "preview": {
                  "type": "string",
                  "x-zui": {}
                }
              },
              "additionalProperties": false
            },
            "x-zui": {
              "index": 4,
              "title": "Transcript",
              "searchable": true
            },
            "description": "The transcript of the conversation, represented as an array of message items."
          },
          "escalations": {
            "type": "array",
            "items": {
              "type": "string",
              "x-zui": {}
            },
            "x-zui": {
              "index": 5,
              "title": "Escalations",
              "computed": {
                "action": "ai",
                "prompt": "Extract the escalations from the provided transcript. An array representing moments when the conversation was escalated to another team member or department.\nHere's the transcript:\n\n{{transcript}}",
                "dependencies": [
                  "transcript"
                ]
              },
              "searchable": true
            },
            "nullable": true,
            "description": "Optional. An array representing moments when the conversation was escalated to another team member or department."
          },
          "conversationId": {
            "type": "string",
            "x-zui": {
              "index": 6,
              "title": "Conversation ID",
              "searchable": true
            },
            "description": "A unique identifier for this specific chat session."
          }
        },
        "additionalProperties": true
      },
      "parentFolder": "root",
      "selectors": []
    }
  },
  "schemas": [],
  "versions": [
    {
      "name": "08 Apr 25 12:43",
      "id": "version_01JRBEVHA81MMXHATT24DJQEMF"
    },
    {
      "name": "08 Apr 25 12:41",
      "id": "version_01JRBEQJN54SKYWCDGQF8NEWTG"
    }
  ],
  "revision": 50,
  "revisionMetadata": {
    "lastRevisionCheckAt": "2025-04-08T19:41:17.383Z",
    "lastRevisionId": 49,
    "multiplayerStatus": "connected",
    "multiplayerTraces": [
      "2025-04-08T19:28:55.427Z: initialized -> connecting (ok)",
      "2025-04-08T19:28:56.538Z (Y0m7MnhMMx): connecting -> connected (ok)"
    ],
    "players": [
      "paveldog7@gmail.com / sess_01JRBE0RWRBWD6BDQ6EY4K7KN6 / Tue, 08 Apr 2025 19:28:57 GMT"
    ],
    "savedAt": "2025-04-08T19:44:37.637Z",
    "savedBy": "paveldog7@gmail.com",
    "sessionId": "sess_01JRBE0RWRBWD6BDQ6EY4K7KN6"
  },
  "identity": {
    "name": "glamai",
    "manual_instructions": "",
    "icon": {
      "type": "emoji",
      "emoji": "ü§ñ ",
      "background_color": "var(--orange-5)"
    },
    "ai_summary": {
      "value": "Chatbot named sparkling-eland provides concise information.",
      "input_hash": "7j8s9",
      "generated_at": "2025-02-26T18:41:46.789Z",
      "version": "1.0.0"
    }
  }
}